#!/usr/bin/env node

const path = require("path");
const fs = require("fs");
const childProcess = require("child_process");
const { qtHome } = require("@nodegui/qode");

const WORKING_DIR = process.cwd();
const MOC_AUTOGEN_OUT_DIR = path.resolve(WORKING_DIR, "src/cpp/autogen");
const MOC_GYPI_OUT_FILE = path.resolve(WORKING_DIR, "config/moc.gypi");
const MOC_CONFIG_IN_FILE = path.resolve(WORKING_DIR, "config/moc.js");
const NODEGUI_MODULE_ROOT = path.resolve(__dirname, "..");
const MOC_EXECUTABLE_DIR = path.resolve(qtHome, "bin");
const PLUGIN_INCLUDE_HEADER = path.resolve(
  NODEGUI_MODULE_ROOT,
  "plugin",
  "include.h"
);

const main = () => {
  const config = getUserConfig();
  const outFiles = config.headers.map(eachHeaderPath => {
    const fullHeaderPath = path.resolve(config.rootDir, eachHeaderPath);
    const fullIncludeFilePath = path.resolve(config.rootDir, config.include);
    const { command, outfilePath } = generateMOCCommand(
      fullHeaderPath,
      fullIncludeFilePath
    );
    executeCommand(command);
    return outfilePath;
  });
  createMOCGypFile(outFiles);
};

// --------------------------- Helpers ---------------------------

const executeCommand = command => {
  const PATH = `${MOC_EXECUTABLE_DIR}${path.delimiter}${process.env.PATH}`;
  childProcess.exec(
    command,
    { env: { ...process.env, PATH } },
    err => err && console.error(err)
  );
};

const getUserConfig = () => {
  return require(MOC_CONFIG_IN_FILE);
};

const generateMOCCommand = (inputHeaderFilePath, includeHeaderFilePath) => {
  const parsed = path.parse(inputHeaderFilePath);
  const outfilePath = path.format({
    dir: MOC_AUTOGEN_OUT_DIR,
    name: `${parsed.name}_moc`,
    ext: ".cpp"
  });
  const command = [
    "moc",
    inputHeaderFilePath,
    `-o ${outfilePath}`,
    `--include ${PLUGIN_INCLUDE_HEADER}`,
    `--include ${includeHeaderFilePath}`,
    `-I ${NODEGUI_MODULE_ROOT}`
  ].join(" ");
  return { command, outfilePath };
};

const createMOCGypFile = outFilePaths => {
  const sources = outFilePaths.map(eachOutFilePath => {
    return path.relative(path.parse(MOC_GYPI_OUT_FILE).dir, eachOutFilePath);
  });
  const gypiConfig = {
    sources: sources
  };
  const comment = `# AUTOGENERATED FILE. DO NOT MODIFY . ALL CHANGES WILL BE LOST\n# RUN: npm run automoc after updating moc.json\n`;
  console.log("Updating moc.gypi...");
  const fileContent = JSON.stringify(gypiConfig, null, 4);
  fs.writeFileSync(MOC_GYPI_OUT_FILE, comment.concat(fileContent));
  console.log("Updated moc.gypi");
};

// --------------------------- EXECUTE ---------------------------

main();
