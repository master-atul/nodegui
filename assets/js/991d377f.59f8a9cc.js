"use strict";(self.webpackChunknodegui=self.webpackChunknodegui||[]).push([[6975],{65409:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>m,frontMatter:()=>t,metadata:()=>l,toc:()=>d});var a=i(74848),s=i(28453);const t={sidebar_label:"Images",title:"Images"},o=void 0,l={id:"guides/images",title:"Images",description:"Images are very important for making your app more interesting.",source:"@site/docs/guides/images.md",sourceDirName:"guides",slug:"/guides/images",permalink:"/docs/guides/images",draft:!1,unlisted:!1,editUrl:"https://github.com/nodegui/nodegui/edit/master/website/docs/guides/images.md",tags:[],version:"current",frontMatter:{sidebar_label:"Images",title:"Images"},sidebar:"guides",previous:{title:"ScrollArea",permalink:"/docs/guides/scroll-view"},next:{title:"Drag and drop",permalink:"/docs/guides/drag-drop"}},r={},d=[{value:"Loading an image using a url",id:"loading-an-image-using-a-url",level:2},{value:"Some tips",id:"some-tips",level:2},{value:"Showing large images",id:"showing-large-images",level:3},{value:"Animated images",id:"animated-images",level:3}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"Images are very important for making your app more interesting."}),"\n",(0,a.jsx)(n.p,{children:"In NodeGui, QLabel is typically used for displaying text, but it can also display an image."}),"\n",(0,a.jsx)(n.p,{children:"A very minimal example would look like this:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"const { QMainWindow, QPixmap, QLabel } = require('@nodegui/nodegui');\n\nconst win = new QMainWindow();\nconst label = new QLabel();\n\nconst absoluteImagePath = '/Users/atulr/Project/nodegui/nodegui/extras/assets/logox200.png';\nconst image = new QPixmap();\nimage.load(absoluteImagePath);\n\nlabel.setPixmap(image);\n\nwin.setCentralWidget(label);\nwin.show();\nglobal.win = win;\n"})}),"\n",(0,a.jsx)(n.p,{children:"Here,"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"We first create a label using QLabel."}),"\n",(0,a.jsxs)(n.li,{children:["Then we create an instance of QPixmap. ",(0,a.jsx)(n.code,{children:"QPixmap"})," is used to represent the image in memory. QPixmap is not a widget, so it can\u2019t be shown on the screen as it is."]}),"\n",(0,a.jsx)(n.li,{children:"Hence, we use QLabel instance and set QPixmap to it."}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"The result would look like this:"}),"\n",(0,a.jsx)("img",{src:"https://github.com/nodegui/nodegui/releases/download/assets/image-example.png",alt:"image example",style:{width:"100%",maxWidth:400}}),"\n",(0,a.jsx)(n.h2,{id:"loading-an-image-using-a-url",children:"Loading an image using a url"}),"\n",(0,a.jsxs)(n.p,{children:["Lets say we want to load an image from a URL on the internet. In this case we can't use the ",(0,a.jsx)(n.code,{children:"load()"})," method of QPixmap since its only reserved for local file system images."]}),"\n",(0,a.jsx)(n.p,{children:"Instead, we\u2019ll download the image using axios as a buffer and use the QPixmap's method loadFromData instead."}),"\n",(0,a.jsx)(n.p,{children:"So let\u2019s start with the axios installation:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sh",children:"npm i axios\n"})}),"\n",(0,a.jsx)(n.p,{children:"Now let\u2019s create a function that will take a URL as a parameter and will return a configured QMovie instance for the GIF:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"const axios = require('axios');\n\nasync function getPixmap(url) {\n    const { data } = await axios.get(url, { responseType: 'arraybuffer' });\n    const pixmap = new QPixmap();\n    pixmap.loadFromData(data);\n    return pixmap;\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"getPixmap"})," function takes in a URL, tells axios to download the image as a buffer, and then uses that buffer to create a QPixmap instance."]}),"\n",(0,a.jsx)(n.p,{children:"Since getPixmap returns a promise, we need to make some changes to the code. After some minor refactoring, we end up with the following."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"const { QMainWindow, QPixmap, QLabel } = require('@nodegui/nodegui');\nconst axios = require('axios');\nasync function getPixmap(url) {\n    const { data } = await axios.get(url, { responseType: 'arraybuffer' });\n    const pixmap = new QPixmap();\n    pixmap.loadFromData(data);\n    return pixmap;\n}\nasync function main() {\n    const win = new QMainWindow();\n    const label = new QLabel();\n    const image = await getPixmap('https://upload.wikimedia.org/wikipedia/commons/9/96/Nature-morocco.jpg');\n    label.setPixmap(image);\n    win.setCentralWidget(label);\n    win.show();\n    global.win = win;\n}\nmain().catch(console.error);\n"})}),"\n",(0,a.jsx)(n.p,{children:"And the result would look like this:"}),"\n",(0,a.jsx)("img",{src:"https://github.com/nodegui/nodegui/releases/download/assets/image-from-url.png",alt:"image url example",style:{width:"100%",maxWidth:400}}),"\n",(0,a.jsx)(n.h2,{id:"some-tips",children:"Some tips"}),"\n",(0,a.jsx)(n.h3,{id:"showing-large-images",children:"Showing large images"}),"\n",(0,a.jsx)(n.p,{children:"The above examples wont allow you to show a huge image without either cutting it off or making the widget huge."}),"\n",(0,a.jsx)(n.p,{children:"In order to do that:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"You can create the image instance using QPixmap"}),"\n",(0,a.jsx)(n.li,{children:"Set the image instance to a QLabel"}),"\n",(0,a.jsx)(n.li,{children:"And finally set the QLabel to a QScrollArea that allows you to scroll the image if the size of the image is too big."}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"animated-images",children:"Animated images"}),"\n",(0,a.jsx)(n.p,{children:"In order to use animated images"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Instead of QPixmap use QMovie"}),"\n",(0,a.jsxs)(n.li,{children:["And instead of a label's ",(0,a.jsx)(n.code,{children:"setPixmap"})," method use ",(0,a.jsx)(n.code,{children:"setMovie"})]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["More details on it can be seen on this blog post : ",(0,a.jsx)(n.a,{href:"https://www.sitepoint.com/build-native-desktop-gif-searcher-app-using-nodegui/",children:"https://www.sitepoint.com/build-native-desktop-gif-searcher-app-using-nodegui/"})]})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>l});var a=i(96540);const s={},t=a.createContext(s);function o(e){const n=a.useContext(t);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),a.createElement(t.Provider,{value:n},e.children)}}}]);