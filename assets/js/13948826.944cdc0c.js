"use strict";(self.webpackChunknodegui=self.webpackChunknodegui||[]).push([[2584],{63847:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>r,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>d,toc:()=>l});var t=i(74848),o=i(28453);const s={},a=void 0,d={id:"development/getting-started",title:"getting-started",description:"Getting started",source:"@site/docs/development/getting-started.md",sourceDirName:"development",slug:"/development/getting-started",permalink:"/docs/development/getting-started",draft:!1,unlisted:!1,editUrl:"https://github.com/nodegui/nodegui/edit/master/website/docs/development/getting-started.md",tags:[],version:"current",frontMatter:{}},r={},l=[{value:"Getting started",id:"getting-started",level:2},{value:"Code Structure",id:"code-structure",level:2},{value:"Wrapping a widget",id:"wrapping-a-widget",level:2},{value:"Learning Materials",id:"learning-materials",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"getting-started",children:"Getting started"}),"\n",(0,t.jsx)(n.p,{children:"This library aims to be a nodejs addon which can export Qt Widgets to the Javascript world. By doing so one can develop fully fledged cross platform native GUI applications using only Javascript."}),"\n",(0,t.jsxs)(n.p,{children:["The library depends on ",(0,t.jsx)(n.code,{children:"qode"})," which is a lightly modified version of NodeJS. The slight modification was needed to make it work with this addon. In essense, we will do ",(0,t.jsx)(n.code,{children:"qode your_file.js"})," instead of ",(0,t.jsx)(n.code,{children:"node your_file.js"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Qode is inspired by this post by ",(0,t.jsx)(n.a,{href:"https://github.com/zcbenz",children:"Cheng Zhao"}),": ",(0,t.jsx)(n.a,{href:"https://electronjs.org/blog/electron-internals-node-integration",children:"https://electronjs.org/blog/electron-internals-node-integration"})]}),"\n",(0,t.jsx)(n.p,{children:"This library does not modify Qt in any way and only use it as it is. This library also dynamically links to Qt. So it needs Qt libs to be installed in your system to work (This is done to keep in compliance with open source LGPL license of Qt). We can think of exporting the required libs later."}),"\n",(0,t.jsx)(n.h2,{id:"code-structure",children:"Code Structure"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:".\n\u251c\u2500\u2500 binding.gyp\n\u251c\u2500\u2500 config\n\u251c\u2500\u2500 demo.ts\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 src\n\u2502\xa0\xa0 \u251c\u2500\u2500 cpp    <-- C++ source code\n\u2502\xa0\xa0 \u2514\u2500\u2500 lib    <-- Typescript source code\n\u251c\u2500\u2500 tsconfig.json\n\u2514\u2500\u2500 yarn.lock\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The main folder is ",(0,t.jsx)(n.code,{children:"src"}),". It contains"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"cpp"})," : This folder contains all the C++ source code. Basically all the wrapper code using NAPI to export Qt Widgets and other helper functions to Javascript."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"lib"})," : This folder contains all the Typescript code of the library. This is used to add additonal helper methods and types to exported addon."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Detailed version:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:".\n\u251c\u2500\u2500 binding.gyp\n\u251c\u2500\u2500 config\n\u2502\xa0\xa0 \u251c\u2500\u2500 application.gypi\n\u2502\xa0\xa0 \u251c\u2500\u2500 common.gypi\n\u2502\xa0\xa0 \u2514\u2500\u2500 yoga.gypi\n\u251c\u2500\u2500 demo.ts\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 src\n\u2502\xa0\xa0 \u251c\u2500\u2500 cpp\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 Extras\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 QtGui         <------ All exported classes found inside Qts Gui dynamic library\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 QtWidgets     <------ All exported classes found inside Qts Widgets dynamic library\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 core\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 main.cpp\n\u2502\xa0\xa0 \u2514\u2500\u2500 lib\n\u2502\xa0\xa0     \u251c\u2500\u2500 QtGui\n\u2502\xa0\xa0     \u251c\u2500\u2500 QtWidgets\n\u2502\xa0\xa0     \u2514\u2500\u2500 core\n\u251c\u2500\u2500 tsconfig.json\n\u2514\u2500\u2500 yarn.lock\n\n"})}),"\n",(0,t.jsxs)(n.p,{children:["First step to seeing how everything works is to take a look at ",(0,t.jsx)(n.code,{children:"demo.ts"})," file. This file is basically like a Kitchen application showcasing all the exported widgets currently with the library."]}),"\n",(0,t.jsxs)(n.p,{children:["Make sure you have read how to write native NodeJS Addons blog first. ",(0,t.jsx)(n.a,{href:"https://medium.com/@atulanand94/beginners-guide-to-writing-nodejs-addons-using-c-and-n-api-node-addon-api-9b3b718a9a7f",children:"https://medium.com/@atulanand94/beginners-guide-to-writing-nodejs-addons-using-c-and-n-api-node-addon-api-9b3b718a9a7f"})]}),"\n",(0,t.jsxs)(n.p,{children:["Once you have done that check out ",(0,t.jsx)(n.code,{children:"src/cpp/main.cpp"})," and ",(0,t.jsx)(n.code,{children:"config/application.gypi"})," to see the list of exported C++ classes."]}),"\n",(0,t.jsxs)(n.p,{children:["Then maybe you can take a look at ",(0,t.jsx)(n.code,{children:"src/cpp/QtWidgets/QLabel/qlabel_wrap.h"}),". This will show you how to wrap a simple Qt Widget.\nCheck the corresponding JS file for the addon here ",(0,t.jsx)(n.code,{children:"src/lib/QtWidgets/QLabel/index.ts"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"wrapping-a-widget",children:"Wrapping a widget"}),"\n",(0,t.jsx)(n.p,{children:"Create wrappers for each and every Qt class that you will use with N-API (using node-addon-api since it is c++) and export it onto JS side."}),"\n",(0,t.jsxs)(n.p,{children:["Taking the example of QLabel, if you look inside the directory ",(0,t.jsx)(n.code,{children:"src/cpp/QtWidgets/QLabel"}),", you should see:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"\u251c\u2500\u2500 QLabel\n\u2502\xa0\xa0 \u251c\u2500\u2500 nlabel.cpp\n\u2502\xa0\xa0 \u251c\u2500\u2500 nlabel.h     <---- Extended QLabel\n\u2502\xa0\xa0 \u251c\u2500\u2500 nlabel_moc.cpp <--- Autogenerated file by qt moc.\n\u2502\xa0\xa0 \u251c\u2500\u2500 qlabel_wrap.cpp\n\u2502\xa0\xa0 \u2514\u2500\u2500 qlabel_wrap.h <--- Wrapper file\n"})}),"\n",(0,t.jsx)(n.p,{children:"The idea is :"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"We will first extend QLabel class to form NLabel. NLabel is basically QLabel with some extra methods and variables. More on it below."}),"\n",(0,t.jsx)(n.li,{children:"Then we will use NLabel and wrap it using NAPI and export it to JS side. This is what qlabel_wrap does."}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"NLabel"}),": Since NLabel has inherited from QLabel we can treat is as QLabel with extra methods and properties. Primary reason to extend QLabel to create NLabel is to add support for Event listeners and CSS styling using Flex.\nSo if you take a look at NLabel you will see, it inherits from QLabel and QWidget. QWidget in turn inherits from YogaWidget and EventWidget. Event widget adds event handling support. YogaWidget is a class that contains the magic that enables a regular Qt Widget to have Yoga node. A Yoga node is an instance used by yoga library to calculate a widgets position on the screen. Yoga is a library that will layout the widget on the screen. To do so we will specify the flex properties like alignitems, justify content, margin, paddings etc on the Yoga node of the widget. Apart from adding yoga node, YogaWidget adds support for specifying those yoga properties via Qt's stylesheet. (This is done by using Q_PROPERTY). To make this work we need to use something called as Q_OBJECT inside the class which is a C++ macro. Q_OBJECT will be expanded to relevant code by the compiler. In Qt whenever we add Q_OBJECT to a header file, we need to use a pre compiler called Qt MOC (Meta Object Compiler). The way we use it is"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"moc headername.h -o headername_moc.cpp --include <any_include_file_which_contains_macro>  // example : ../../core/YogaWidget/yogawidget.h\n"})}),"\n",(0,t.jsx)(n.p,{children:"So for nlabel I would run it as:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"moc nlabel.h -o nlabel_moc.cpp --include ../../core/YogaWidget/yogawidget.h\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This will run moc on ",(0,t.jsx)(n.code,{children:"headername.h"})," and generate ",(0,t.jsx)(n.code,{children:"headername_moc.cpp"}),". We will include ",(0,t.jsx)(n.code,{children:"headername_moc.cpp"})," in ",(0,t.jsx)(n.code,{children:"config/moc.gypi"}),". If you dont do this. Then it will give a symbol not found error."]}),"\n",(0,t.jsx)(n.p,{children:"I hope QLabel's example is enough for now. For more examples and inspirations we can take a look at other wrapped widgets."}),"\n",(0,t.jsx)(n.h2,{id:"learning-materials",children:"Learning Materials"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Beginners guide to NodeJS Addon - ",(0,t.jsx)(n.a,{href:"https://medium.com/@atulanand94/beginners-guide-to-writing-nodejs-addons-using-c-and-n-api-node-addon-api-9b3b718a9a7f",children:"https://medium.com/@atulanand94/beginners-guide-to-writing-nodejs-addons-using-c-and-n-api-node-addon-api-9b3b718a9a7f"})]}),"\n",(0,t.jsx)(n.li,{children:"First read this: N-API in nodejs docs"}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://www.youtube.com/watch?v=-Oniup60Afs&feature=youtu.be",children:"https://www.youtube.com/watch?v=-Oniup60Afs&feature=youtu.be"})}),"\n",(0,t.jsxs)(n.li,{children:["See samples at ",(0,t.jsx)(n.a,{href:"https://github.com/nodejs/abi-stable-node-addon-examples/",children:"https://github.com/nodejs/abi-stable-node-addon-examples/"}),"\n4.1. You can see the readme of ",(0,t.jsx)(n.a,{href:"https://github.com/nodejs/node-addon-api.git/",children:"https://github.com/nodejs/node-addon-api.git/"})]}),"\n",(0,t.jsx)(n.li,{children:"See node-qt implementation. It is implemented in Nan (explained in video)."}),"\n",(0,t.jsx)(n.li,{children:"Now try to match the implementation in node-qt and convert to N-API using examples from samples."}),"\n",(0,t.jsx)(n.li,{children:"Implementations not in node-qt need to be done with effort."}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>d});var t=i(96540);const o={},s=t.createContext(o);function a(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);