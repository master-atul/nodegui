"use strict";(self.webpackChunknodegui=self.webpackChunknodegui||[]).push([[7752],{1691:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>a,default:()=>g,frontMatter:()=>s,metadata:()=>d,toc:()=>l});var o=n(74848),r=n(28453);const s={sidebar_label:"Drag and drop",title:"Drag and drop"},a=void 0,d={id:"guides/drag-drop",title:"Drag and drop",description:"NodeGui supports drag and drop functionality.",source:"@site/docs/guides/drag-drop.md",sourceDirName:"guides",slug:"/guides/drag-drop",permalink:"/docs/guides/drag-drop",draft:!1,unlisted:!1,editUrl:"https://github.com/nodegui/nodegui/edit/master/website/docs/guides/drag-drop.md",tags:[],version:"current",frontMatter:{sidebar_label:"Drag and drop",title:"Drag and drop"},sidebar:"guides",previous:{title:"Images",permalink:"/docs/guides/images"},next:{title:"Networking",permalink:"/docs/guides/networking"}},i={},l=[];function c(e){const t={code:"code",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:"NodeGui supports drag and drop functionality."}),"\n",(0,o.jsx)(t.p,{children:"In order to enable a widget to accept drops you need call"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",children:"widget.setAcceptDrops(true);\n"})}),"\n",(0,o.jsxs)(t.p,{children:["Following this you can then listen to few QEvents like ",(0,o.jsx)(t.code,{children:"DragEnter"}),", ",(0,o.jsx)(t.code,{children:"DragMove"}),", ",(0,o.jsx)(t.code,{children:"DragLeave"})," and ",(0,o.jsx)(t.code,{children:"Drop"})]}),"\n",(0,o.jsx)(t.p,{children:"The complete code would look something like this:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",children:"widget.setAcceptDrops(true);\n\nwidget.addEventListener(WidgetEventTypes.DragEnter, (e) => {\n    let ev = new QDragMoveEvent(e);\n    console.log('dragEnter', ev.proposedAction());\n    let mimeData = ev.mimeData();\n    mimeData.text(); //Inspection of text works\n    console.log('mimeData', {\n        hasColor: mimeData.hasColor(),\n        hasHtml: mimeData.hasHtml(),\n        hasImage: mimeData.hasImage(),\n        hasText: mimeData.hasText(),\n        hasUrls: mimeData.hasUrls(),\n        html: mimeData.html(),\n        text: mimeData.text(),\n    }); //Inspection of MIME data works\n    let urls = mimeData.urls(); //Get QUrls\n    for (let url of urls) {\n        let str = url.toString();\n        console.log('url', str); //Log out Urls in the event\n    }\n    ev.accept(); //Accept the drop event, which is crucial for accepting further events\n});\nwidget.addEventListener(WidgetEventTypes.DragMove, (e) => {\n    let ev = new QDragMoveEvent(e);\n    console.log('dragMove');\n});\nwidget.addEventListener(WidgetEventTypes.DragLeave, (e) => {\n    console.log('dragLeave', e);\n    let ev = new QDragLeaveEvent(e);\n    ev.ignore(); //Ignore the event when it leaves\n    console.log('ignored', ev);\n});\nwidget.addEventListener(WidgetEventTypes.Drop, (e) => {\n    let dropEvent = new QDropEvent(e);\n    let mimeData = dropEvent.mimeData();\n    console.log('dropped', dropEvent.type());\n    let urls = mimeData.urls();\n    for (let url of urls) {\n        let str = url.toString();\n        console.log('url', str); //Example of inspection of dropped data.\n    }\n});\n"})})]})}function g(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>d});var o=n(96540);const r={},s=o.createContext(r);function a(e){const t=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),o.createElement(s.Provider,{value:t},e.children)}}}]);